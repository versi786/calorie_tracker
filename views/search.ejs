<!DOCTYPE html>
<html>
  <head>
    <title>User Page</title>
        <!--  Include bootstrap from CDN-->
        <script src="/javascripts/jquery-1.12.2.min.js"></script>
        <!-- Parsley -->
        <script src='/javascripts/parsley.js'></script>
        <!-- Include bootstrap JS from CDN-->
        <link rel="stylesheet" href="/stylesheets/bootstrap/bootstrap.min.css"></link>
        <link rel="stylesheet" href="/stylesheets/semantic.min.css">
        <link rel="stylesheet" href="/stylesheets/users.css">
        <link rel="stylesheet" href="/stylesheets/globalStyle.css">
  </head>

  <body>

    <div class="alert alert-success alert-dismissable" id="meal_logged">
        <button type="button" class="close" data-dismiss="alert" aria-hidden="true">&times;</button>
            Great job! Keep logging your meals.
    </div>

<!-- NAVIGATION BAR -->
    <nav class="navbar navbar-default">
      <div class="container-fluid">
        <!-- Brand and toggle get grouped for better mobile display -->
        <div class="navbar-header">
          <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1" aria-expanded="false">
            <span class="sr-only">Toggle navigation</span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
          </button>
          <a class="navbar-brand" href="/">Food Tracker</a>
        </div>

        <!-- Collect the nav links, forms, and other content for toggling -->
        <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-1">
          <ul class="nav navbar-nav">
            <li class="active">
                <button type="button" id="new_food_entry_button" class="btn btn-action navbar-btn" onclick="location.href='/newEntry';">New Manual Entry</button>
            </li>
            <li class="active">
                <button type="button" id="new_search_entry_button" class="btn btn-action navbar-btn" onclick="location.href='/search';">New Search Entry</button>
            </li>
            <li class="active">
                <button type="button" id="new_fav_entry_button" class="btn btn-action navbar-btn" onclick="location.href='/favorites';">New Entry From Favorites</button>
            </li>
            <li>
                <button type="button" id="new_exercise_entry_button" class="btn btn-action navbar-btn" onclick="location.href='/newExerciseEntry';">New Exercise Entry</button>
            </li>
            <li class="active">
                <button type="button" id="calculator_button" class="btn btn-action navbar-btn" onclick="location.href='/calculator';">Calorie Calculator</button>
            </li>
            <li class="active">
                <button type="button" id="history_button" class="btn btn-action navbar-btn" onclick="location.href='/history';">History</button>
            </li>
          </ul>
          <ul class="nav navbar-nav navbar-right">
            <li class="dropdown">
              <a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false">Settings <span class="caret"></span></a>
              <ul class="dropdown-menu">
                <li><a href="/edit">Edit</a></li>
                <li><a href="/public/<%= username %>">Public View</a></li>
                <li role="separator" class="divider"></li>
                <li><a href="/logout">Logout</a></li>
              </ul>
            </li>
          </ul>
        </div><!-- /.navbar-collapse -->
      </div><!-- /.container-fluid -->
    </nav>

    <!-- Show "analytics" - currently just remaining goals -->

    <div class="container-fluid">
    <div class="row">
      <div class="col-sm-8 col-sm-offset-2">
        <!-- search bar -->
        <form id="form" class="ui form"  action="/search" method="post">

        <div class="ui action huge labeled input field">
          <div class="ui icon basic button" onclick="startStopVoiceSearch()">
            <i id="voiceIcon" class="unmute big icon"></i>
          </div>
          <input id="query" type="text" placeholder="Click on a microphone icon or type in your query" name="searchTerm"/>
          <button id="textSearchButton" class="ui icon button" onclick="textQuery()">
             <i class="search big icon"></i>
          </button>
        </div>
        <div class="ui field" hidden style="display: none;">
          <label>Response object</label>
          <textarea id="responseJSON"></textarea>
        </div>
        <div class="ui field" hidden style="display: none;">
          <label>Search info object</label>
          <textarea id="infoJSON"></textarea>
        </div>
        </form>
      </div>
    </div>

    <div class="row">
      <div class="col-sm-8 col-sm-offset-2">
        <!-- search results -->
        <% if(searchTerm) { %>
          <h1> Searching for: <%= searchTerm %><h1>
        <% }%>
      </div>
    </div>

     <div class="row">
      <div class="col-sm-10 col-sm-offset-1">
        <!-- search results -->
        <% if(searchResultsArr) { %>
          <h4>Results</h4>
          <table class="table table-striped">
            <tr>
              <th>Name</th>
              <th>Calories</th>
              <th>Carbs</th>
              <th>Fat</th>
              <th>Protein</th>
              <th>Quantity</th>
              <th>Unit</th>
              <th>Meal</th>
              <th>Fav?</th>
              <th>Submit</th>
            </tr>
            <% for (var i = 0; i < searchResultsArr.length; i++) { %>
              <tr>
                <form action='/search/submit' method='post' id="search_form<%= i %>" data-parsley-validate>
                  <td>
                    <input readonly type="text" class="form-control" id="food_input" value="<%= searchResultsArr[i].fields.item_name %>" name="item_name">
                  </td>
                  <td>
                    <input readonly type="text" class="form-control" id="food_input" value="<%= searchResultsArr[i].fields.nf_calories %>" name="nf_calories">
                  </td>
                  <td>
                    <input readonly type="text" class="form-control" id="food_input" value="<%= searchResultsArr[i].fields.nf_total_carbohydrate %>" name="nf_total_carbohydrate">
                  </td>
                  <td>
                    <input readonly type="text" class="form-control" id="food_input" value="<%= searchResultsArr[i].fields.nf_total_fat %>" name="nf_total_fat">
                  </td>
                  <td>
                    <input readonly type="text" class="form-control" id="food_input" value="<%= searchResultsArr[i].fields.nf_protein %>" name="nf_protein">
                  </td>
                  <td>
                    <input type="text" class="form-control" id="ss_input<%= i %>" value="<%= searchResultsArr[i].fields.nf_serving_size_qty %>" name="nf_serving_size_qty" data-parsley-type="integer" min="1" max="100">
                  </td>
                  <td>
                    <input readonly type="text" class="form-control" id="food_input" value="<%= searchResultsArr[i].fields.nf_serving_size_unit %>" name="nf_serving_size_unit">
                  </td>
                  <td>
                    <select class="form-control" id="meal_choice" name="meal_choice">
                        <option>Breakfast</option>
                        <option>Lunch</option>
                        <option>Dinner</option>
                        <option>Snack</option>
                    </select>
                  </td>
                  <td>
                    <input id="add_to_favorites" name="add_to_favorites" class="form-control" type="checkbox" value="true"></input>
                  </td>
                  <td>
                    <button class="btn primary" type="submit">Submit</button>
                  </td>
                </form>

                <script>
                  $(function () {
                    $('#search_form<%= i %>').parsley()
                    .on('form:submit', function() {
                      $('#ss_input<%= i %>').parsley().validate();
                      if ($('#ss_input<%= i %>').parsley().isValid()) {
                        return true;
                      } else {
                        return false;
                      }
                    });
                  });
                </script>

              </tr>
            <% } %>
          </table>
        <% }%>
      </div>
    </div>


    </div> <!-- container fluid -->

    <script src="../javascripts/userVis.js"></script>
    <script>

      //HTML ELEMENTS FOR DISPLAYING RESPONSE AND INFO JSON's
      var jsonElet = document.getElementById("responseJSON");
      var infoElet = document.getElementById("infoJSON");


      //REQUEST INFO JSON
      //see https://houndify.com/reference/RequestInfo
      var requestInfo = {
        ClientID: "JyD40CQl16l4NO-Mz-PKJQ==", Latitude: 37.388309, Longitude: -121.973968 };


      //INITIALIZE HOUNDIFY CLIENT
      var myClient = new Houndify.HoundifyClient({

        //Your Houndify Client ID
        clientId: "JyD40CQl16l4NO-Mz-PKJQ==",

        //You need to create an endpoint on your server
        //for handling the authentication.
        //See SDK's server-side method HoundifyNode.createAuthenticationHandler().
        authURL: "/houndifyAuth",

        //For testing environment you might want to authenticate on frontend without Node.js server.
        //In that case you may pass in your Houndify Client Key instead of "authURL".
        //clientKey: "YOUR_CLIENT_KEY",

        //Enable Voice Activity Detection
        //Default: true
        enableVAD: true,

        //You need to create an endpoint on your server
        //for handling the authentication and proxying
        //text search http requests to Houndify backend
        //See SDK's server-side method HoundifyNode.createTextProxyHandler().
        textSearchProxy: {
          url: "/textSearchProxy",
          method: "GET"
          // headers: {}
          // ... More proxy options will be added as needed
        },

        //Listeners

        //Fires after server responds with Response JSON
        //Info object contains useful information about the completed request
        //See https://houndify.com/reference/HoundServer
        onResponse: function(response, info) {
          if (response.AllResults && response.AllResults[0] !== undefined) {
            jsonElet.value = JSON.stringify(response, undefined, 2);
            jsonElet.parentNode.hidden = false;
            infoElet.value = JSON.stringify(info, undefined, 2);
            infoElet.parentNode.hidden = false;
          }
        },

        //Fires if error occurs during the request
        onError: function(err, info) {
          jsonElet.parentNode.hidden = true;
          infoElet.value = JSON.stringify(info, undefined, 2);
          infoElet.parentNode.hidden = false;
          document.getElementById("voiceIcon").className = "unmute big icon";
        },

        //Fires every time backend sends a speech-to-text
        //transcript of a voice query
        //See https://houndify.com/reference/HoundPartialTranscript
        onTranscriptionUpdate: function(trObj) {
          var transcriptElt = document.getElementById("query");
          transcriptElt.value = trObj.PartialTranscript;
        },

        //Fires after abort() method is called on search object
        onAbort: function(info) {},

        //Fires when start() metods is called on search object
        onRecordingStarted: function() {
          document.getElementById("voiceIcon").className = "selected radio icon big red";
        },

        //Fires when recording ends either after stop(), abort() or
        //when server detects the end of query and responds
        //(VAD: https://houndify.com/docs#voice-activity-detection)
        onRecordingStopped: function(recording) {
          document.getElementById("voiceIcon").className = "unmute big icon";
          document.getElementById("textSearchButton").disabled = false;
          document.getElementById("query").readOnly = false;
        },

        //Fires every time new audio frame of recording is captured
        onAudioFrame: function(frame) {}
      });


      //TEXT SEARCH TEST
      function textQuery() {
        var query = document.getElementById('query').value;
        myClient.textSearch.query(query, requestInfo);
        jsonElet.parentNode.hidden = true;
        infoElet.parentNode.hidden = true;
      }


      //MIC VOICE SEARCH TEST
      function startStopVoiceSearch() {
        if (myClient.voiceSearch.isStreaming()) {
          //stops streaming voice search requests, expects the final response from backend
          myClient.voiceSearch.stop();
        } else {
          myClient.voiceSearch.start(requestInfo);
          //starts streaming of voice search requests to Houndify backend
          document.getElementById("voiceIcon").className = "loading circle notched icon big";
          document.getElementById("textSearchButton").disabled = true;
          document.getElementById("query").readOnly = true;
          jsonElet.parentNode.hidden = true;
          infoElet.parentNode.hidden = true;
        }
      }


      //FILE VOICE SEARCH TEST
      function onFileUpload() {
        var fileElt = document.getElementById("file");
        var file = fileElt.files[0];
        if (!file) return;

        document.getElementById("query").value = "...";

        var reader = new FileReader();
        reader.onload = function() {
          var arrayBuffer = reader.result;
          // Pass arrayBuffer from WAV file, requestInfo and isNarrowband flag
          // to voiceSearch.upload() to get voice search results for pre-recorded audio.
          // Houndify backend supports 8kHz and 16kHz audio.
          // By default uploaded file will be resampled to 16kHz.
          // Pass "true" as the third argument (isNarrowband)
          // if your audio has a sampling rate of less than 16kHz.
          // It will be resampled to 8kHz instead to avoid upsampling.
          myClient.voiceSearch.upload(arrayBuffer, requestInfo, false);
          jsonElet.parentNode.hidden = true;
          infoElet.parentNode.hidden = true;
        };
        reader.readAsArrayBuffer(file);
      }

    </script>
  </body>
</html>
